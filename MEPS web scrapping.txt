# -*- coding: utf-8 -*-
"""
Created on Fri Dec  3 18:47:32 2021

@author: a383785
"""
import pandas as pd
import numpy as np
import selenium
from selenium import webdriver
import time
import datetime
from datetime import date, datetime
from selenium.webdriver.common.keys import Keys

#Install Driver
driver = webdriver.Chrome("C:\\chromedriver\\chromedriver.exe")

# credentials
username = "ramesh.s@volvo.com"
password = "Classic123#"

driver.get("https://portal.mepsinternational.com/?logout=true")

# find username/email field and send the username itself to the input field
driver.find_element_by_id("Reg_Email").send_keys(username)
# find password input field and insert password as well
driver.find_element_by_id("Reg_Password").send_keys(password)
# click login button
driver.find_element_by_xpath("//*[@type='submit']").click()
time.sleep(2)
# click view subscriptions
driver.find_element_by_xpath('//a[@href="/account/subscriptions/"]').click()

list_of_hrefs = []

content_blocks = driver.find_elements_by_class_name("table-primary__body")

for block in content_blocks:
    elements = block.find_elements_by_tag_name("a")
    for el in elements:
        test = el.get_attribute("href")
        if (test != "https://portal.mepsinternational.com/account/single-licence/" ) and (test not in list_of_hrefs):
            list_of_hrefs.append(el.get_attribute("href"))
            
df = pd.DataFrame(columns = ["DATE"])
        
for lst in list_of_hrefs:
    driver.get(lst)
    time.sleep(2)
    df1 = pd.DataFrame() 
    
    Title = []     
    dates = []
    values = []
    # to identify the table column
    l=driver.find_elements_by_xpath ("//*[@class= 'table-primary']/tbody/tr/td[2]")
    # to traverse through the list of cell data
    for i in l :
        # to get the cell data with text method
        values.append(i.text)
        
    l=driver.find_elements_by_xpath ("//*[@class= 'table-primary']/tbody/tr/td[1]")
    # to traverse through the list of cell data
    for i in l :
        # to get the cell data with text method
        dates.append(i.text)    

    # to identify the table column headers in row 1
    header_l=driver.find_elements_by_xpath ("//*[@class= 'table-primary']/thead[1]/tr[1]/th")
    # to traverse through the list of headers
    for i in header_l :
        # to get the header with text method
        Title.append(i.text)
        
    # both lists, with columns specified
    df1 = pd.DataFrame(list(zip(dates, values)), columns =[Title[0], Title[1]])
    
    df = df.merge(df1, on='DATE', how='outer')

df = df.melt(id_vars=["DATE"], 
        var_name="Raw_Material", 
        value_name="Amount")
# converting datatypes
df = df.astype("int64", errors='ignore')

# Add column for Actual/Forecast
today = datetime.now()
first_day_of_month = today.strftime("%Y-%m-01")
df["Date"] = df["DATE"].apply(pd.to_datetime)
df["Forecast_Actual"] = np.where(df.Date < datetime.strptime(first_day_of_month, '%Y-%m-%d'), 'A', 'F')
df["Version"] = today.strftime('%Y%m')
df["Period"] = df['Date'].dt.strftime('%Y%m')

df = df.sort_values(by="Date",ascending=True).set_index("Date").last("24M")

weight_currency = []
# to identify the weight and currency
weight_currency_l=driver.find_elements_by_xpath ("//*[@class='data-bar']/p/span  ")
# to traverse through the list of headers
for i in weight_currency_l :
    # to get the header with text method
    weight_currency.append(i.text)

# Add Currency, Weight and Index columns
currency_weight = weight_currency[0].split()
# df = df.assign(Currency= currency_weight[0])   
# df = df.assign(Unit_Of_Weight= currency_weight[-1]) 
df = df.assign(Currency= "EUR")   
df = df.assign(Unit_Of_Weight= "TON") 
df = df.assign(Index = "MEPS") 

df = df[["Index", "Raw_Material", "Currency", "Unit_Of_Weight", "Period", "Version", "Amount", "Forecast_Actual"]]

# determining the name of the file
file_name = 'MEPS.xlsx'
      
# saving the excel
df.to_excel(file_name, index=False)






